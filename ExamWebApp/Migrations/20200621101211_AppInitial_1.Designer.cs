// <auto-generated />
using System;
using ExamWebApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamWebApp.Migrations
{
    [DbContext(typeof(ExamDbContext))]
    [Migration("20200621101211_AppInitial_1")]
    partial class AppInitial_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamWebApp.Models.Exam", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExamDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamWebApp.Models.ExofSt", b =>
                {
                    b.Property<string>("ExofStId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExofStId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ExofSts");
                });

            modelBuilder.Entity("ExamWebApp.Models.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte>("MaxGrade")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinGrade")
                        .HasColumnType("tinyint");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = "c5c0baeb-1025-4125-9b40-aecac44dcd9e",
                            Letter = "A",
                            MaxGrade = (byte)100,
                            MinGrade = (byte)91
                        },
                        new
                        {
                            GradeId = "ac6f4ff0-b8bc-40d5-968a-e5cd326090d5",
                            Letter = "B",
                            MaxGrade = (byte)90,
                            MinGrade = (byte)81
                        },
                        new
                        {
                            GradeId = "60d2034e-7e79-4600-b4ab-ce7897ba382e",
                            Letter = "C",
                            MaxGrade = (byte)80,
                            MinGrade = (byte)71
                        },
                        new
                        {
                            GradeId = "105b597b-8305-4cfc-ab83-3a05ae930fb0",
                            Letter = "D",
                            MaxGrade = (byte)70,
                            MinGrade = (byte)61
                        },
                        new
                        {
                            GradeId = "3dfc277c-235d-41f3-8ddc-1e8a5254a837",
                            Letter = "E",
                            MaxGrade = (byte)60,
                            MinGrade = (byte)51
                        },
                        new
                        {
                            GradeId = "5b53eb7c-6d4a-4c64-81d2-dd6f14e00213",
                            Letter = "F",
                            MaxGrade = (byte)50,
                            MinGrade = (byte)0
                        });
                });

            modelBuilder.Entity("ExamWebApp.Models.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SchoolClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ExamWebApp.Models.SchoolClass", b =>
                {
                    b.Property<string>("SchoolClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolClassId");

                    b.ToTable("SchoolClasses");

                    b.HasData(
                        new
                        {
                            SchoolClassId = "dad8511a-b590-4d7a-82ef-c1d24b1c6f62",
                            Nth = "First"
                        },
                        new
                        {
                            SchoolClassId = "b2b85b59-318d-4fe0-a59d-c5f71bef05d2",
                            Nth = "Second"
                        },
                        new
                        {
                            SchoolClassId = "63e6f5c4-d2b5-48f2-94bd-18d1838aae76",
                            Nth = "Third"
                        },
                        new
                        {
                            SchoolClassId = "dc938e8c-ef05-4dc2-ad1e-71bbb302975c",
                            Nth = "Fourth"
                        },
                        new
                        {
                            SchoolClassId = "a766af06-acd9-4dda-80ce-89e75bf46041",
                            Nth = "Fifth"
                        },
                        new
                        {
                            SchoolClassId = "4e5000db-23c6-486f-9184-e03b0823421b",
                            Nth = "Sixth"
                        },
                        new
                        {
                            SchoolClassId = "51da4f60-5dfa-4625-93d7-acfecf53e88b",
                            Nth = "Seventh"
                        },
                        new
                        {
                            SchoolClassId = "de209d0e-016b-46f1-a3a1-c3e6b037aade",
                            Nth = "Eighth"
                        },
                        new
                        {
                            SchoolClassId = "98be51c7-ca69-4c0e-8fdb-2120476da858",
                            Nth = "Ninth"
                        },
                        new
                        {
                            SchoolClassId = "43434857-0a25-4634-bd37-7f52ed3ffc5d",
                            Nth = "Tenth"
                        },
                        new
                        {
                            SchoolClassId = "3c6b4431-bf92-4d7c-bc85-6e7fcccf5782",
                            Nth = "Eleventh"
                        });
                });

            modelBuilder.Entity("ExamWebApp.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<byte?>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamWebApp.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = "11a52b6a-eca8-417c-82d3-67c9f4d2aa2c",
                            Name = "AnaDili"
                        },
                        new
                        {
                            SubjectId = "84deca78-2d6e-46ee-99e3-9cec47a988b5",
                            Name = "Ədəbiyyat"
                        },
                        new
                        {
                            SubjectId = "48161623-8f57-491e-a51a-dbd8835b4336",
                            Name = "Tarix"
                        },
                        new
                        {
                            SubjectId = "3aa0e748-51e5-4cca-9bdf-dfa94aafaa9a",
                            Name = "Rus_Dili"
                        },
                        new
                        {
                            SubjectId = "07113265-8f60-4cc7-a004-f120515c7f7c",
                            Name = "Ingilis_Dili"
                        },
                        new
                        {
                            SubjectId = "3927a7e1-ebb5-4e56-af4e-c4e3f69b29b0",
                            Name = "Fizika"
                        },
                        new
                        {
                            SubjectId = "22e89eca-f64f-4f00-958a-df321d5a9a77",
                            Name = "Coğrayiya"
                        },
                        new
                        {
                            SubjectId = "6cd74d09-feea-48c7-8614-d7987cb99630",
                            Name = "Kimya"
                        },
                        new
                        {
                            SubjectId = "599d1f4d-2719-474e-85d6-44c1c59d6e9f",
                            Name = "Cəbr"
                        },
                        new
                        {
                            SubjectId = "aba1e1ce-ff17-4dd3-8ab6-a3f4c7a3b282",
                            Name = "Həndəsə"
                        });
                });

            modelBuilder.Entity("ExamWebApp.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("TeacherId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ExamWebApp.Models.Worker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExamWebApp.Models.Exam", b =>
                {
                    b.HasOne("ExamWebApp.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("ExamWebApp.Models.ExofSt", b =>
                {
                    b.HasOne("ExamWebApp.Models.Exam", "Exam")
                        .WithMany("ExofSts")
                        .HasForeignKey("ExamId");

                    b.HasOne("ExamWebApp.Models.Student", "Student")
                        .WithMany("ExofSts")
                        .HasForeignKey("StudentId");

                    b.HasOne("ExamWebApp.Models.Teacher", "Teacher")
                        .WithMany("ExofSts")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ExamWebApp.Models.Group", b =>
                {
                    b.HasOne("ExamWebApp.Models.SchoolClass", "SchoolClass")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolClassId");

                    b.HasOne("ExamWebApp.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ExamWebApp.Models.Student", b =>
                {
                    b.HasOne("ExamWebApp.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("ExamWebApp.Models.Teacher", b =>
                {
                    b.HasOne("ExamWebApp.Models.Subject", "Subject")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExamWebApp.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExamWebApp.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamWebApp.Models.Worker", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExamWebApp.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
